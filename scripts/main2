from configs import pipelines  # Hiperparâmetros
from configs import params
from configs import SCALERS
from processamento_HRT import  X_train, X_test, y_train, y_test
from utils import load_model
from shap_plots import generate_shap_plots
from limeplots import generate_lime_explanation
from sklearn.metrics import classification_report


for model_name in pipelines:

    # Carregar o melhor modelo salvo
    best_model = load_model(model_name)
    print(best_model)
    best_model.fit(X_train, y_train)
    if best_model.named_steps['scaler'] is not None:
        X_test_transformed = best_model.named_steps['scaler'].transform(X_test)
    else:
        X_test_transformed = X_test
    # Avaliar no conjunto de teste
    print(classification_report(y_test, best_model.predict(X_test)))

    # Gerar gráficos SHAP
    generate_shap_plots(best_model.named_steps['classifier'], model_name, X_train, X_test)

    # # Gerar explicação LIME
    # generate_lime_explanation(best_model, X_train, X_test)